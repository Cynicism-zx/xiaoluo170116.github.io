<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo博客搭建</title>
    <url>/2019/10/24/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>hexo博客搭建的步骤以及注意事项，以及如何更改主题以及主题的配置</p>
<a id="more"></a>]]></content>
      <categories>
        <category>methods</category>
      </categories>
      <tags>
        <tag>hexo博客搭建步骤</tag>
      </tags>
  </entry>
  <entry>
    <title>vim编辑器</title>
    <url>/2019/10/23/vim%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<p>主要讲述Linux操作系统的安装和使用和git的版本控制问题及注意事项</p>
 <a id="more"></a>

<h2 id="Linux操作系统"><a href="#Linux操作系统" class="headerlink" title="Linux操作系统"></a>Linux操作系统</h2><h3 id="1-连接云服务器"><a href="#1-连接云服务器" class="headerlink" title="1.连接云服务器"></a>1.连接云服务器</h3><h3 id="2-日常操作"><a href="#2-日常操作" class="headerlink" title="2.日常操作"></a>2.日常操作</h3><p>1）cd指令</p>
<p> <strong><em>cd 目录</em></strong>   —— 进入指定目录</p>
<p><strong><em>cd ..</em></strong>      返回上层目录</p>
<p><strong>cd ~</strong>     回到根目录</p>
<p><strong>cd /</strong>      回到系统根目录</p>
<p>2）ls指令</p>
<p><code>ls</code>           —— 查看当前目录</p>
<p><code>ls -l/-lh</code>    —— 查看详情</p>
<p><code>ls -a</code>       ——显示所有文件</p>
<p><code>ls -R</code>      —— 递归显示所有内容</p>
<p><code>ls -S/-t</code>  —— 按大小/时间排序</p>
<p>注意：多个功能不冲突的参数可以同时使用，中间用空格隔开，例如：ls -t -h</p>
<p>3）pwd指令  —— 显示当前完整目录（路径）</p>
<p>4）文件操作指令</p>
<p><code>touch 文件名</code>      —— 新建文件</p>
<p><code>cat 文件名</code>         —— 查看文件内容（只能可读）</p>
<p><code>Vim/vi 文件名</code>    —— 打开文件（可读可操作，文件不存在会创建再打开）</p>
<p><code>rm 文件名</code>          —— 删除文件（询问是否删除吧）</p>
<p><code>rm -r</code>                  —— 删除文件夹（提醒是否删除）</p>
<p><code>rm -f  目录</code>                —— 强制性删除文件（不会提醒）</p>
<p>5）文件夹操作</p>
<p><code>mkdir 目录名</code>        —— 新建文件夹</p>
<p><code>mkdir p a/b/c..</code>     —— 新建一个p文件夹，再在p文件夹下自动创建a，a下自动创建b，b下                                     自动创建c，…..</p>
<p><code>mkdir p a/{b,c}/{e,f}....</code>        —— 自动创建一个p文件夹，再在p内创建a，a内再创建b，c；b，c内在创建e，f</p>
<p><code>rmdir 目录名</code>           —— 删除指定空目录</p>
<p><code>cp 文件名1 文件名2</code>    —— 将文件名1的内容拷贝到文件名2</p>
<p><code>cp -r  文件1/目录1 目录2</code>/   ——  将指定文件/目录拷贝到目录2</p>
<p><code>mv 文件1 目录1</code>      —— 将文件1移动到目录1</p>
<p><code>mv 文件名1 文件名2</code>  —— 文件1的内容移动到文件名2（并且删除文件1）</p>
<p><code>mv 目录1 目录2</code>    —— 目录1 的内容移动到目录2，并删除目录1</p>
<p>(注意：cp/mv/rm 后面可以跟： -i询问  -f强制  -n不覆盖)</p>
<p>6）history      —— 显示历史指令记录</p>
<p>bashrc 配置显示时间：export  HISTTIMEFORMAT=”[%y‐%m‐%d_%T] “ </p>
<p>修改bashrc 后使其生效:  source ~/.bashrc  或 .  .bashrc   </p>
<p>7）链接</p>
<p><code>ln -s 源路径 目标路径</code>    —— （软连接）源路径必须是绝对路径，相当于建立快捷方式，保存的是文件的源路径</p>
<p><code>ln 源路径 目标路径</code>  —— （硬链接）产生一个新的文件名，内容还是与之前共用</p>
<p>8）快捷键</p>
<h3 id="3-进程相关指令（用得少）"><a href="#3-进程相关指令（用得少）" class="headerlink" title="3.进程相关指令（用得少）"></a>3.进程相关指令（用得少）</h3><p>1）ps</p>
<p><em>ps</em>             —— 进程状态</p>
<p><code>ps -aux 或 ps ex</code>          ——查看进程</p>
<p><code>ps aux|grep 进程名</code>      —— 查看指定进程</p>
<p><code>ps grep 进程id</code></p>
<p>2）top</p>
<p><code>top</code>    —— 动态监控进程</p>
<p><code>top -p PID1,PID2.....</code>    —— 动态监控指定进程</p>
<p>3）free</p>
<p><code>free -单位</code>   —— 以指定单位查看内存，如free -m（以Mb为单位）-g，-k等</p>
<p>4）kill指令</p>
<p><code>kill 进程号</code>     —— 杀死指定进程</p>
<p><code>kill -1/-9/-15</code>   —— -1（hup）不间断重启，-9（kill）强制杀死进程，-15（TERM）正常终止进程</p>
<p><code>pkill 进程名</code> —— 按名字处理进程</p>
<p><code>killall 进程名</code>   —— 处理匹配的进程</p>
<p>5）uptime     —— 查看系统状态</p>
<h3 id="4-权限管理"><a href="#4-权限管理" class="headerlink" title="4.权限管理"></a>4.权限管理</h3><p>1）</p>
<p><em>users</em>    ——查看当前用户</p>
<p><em>groups</em>   —— 查看当前分组</p>
<p><code>groupadd 分组名</code>   —— 添加分组</p>
<p><code>useradd 用户名</code>  —— 创建新的用户（在home下创建这个用户对应的文件夹，root才有的权限）</p>
<p><code>useradd -G 分组列表 -m -s/bin/bash 用户名</code>    —— 创建一个用户添加到指定分组中</p>
<p><code>usermod -G 分组列表 用户名</code>   —— 修改分组</p>
<p><code>passwd 用户名</code>    —— 修改密码（root才有权限）</p>
<p><code>passwd</code>  —— 修改当前用户密码</p>
<p><code>su 用户名</code>   —— 切换用户身份（root不需要密码，其他用户需要）</p>
<p><code>sudo 用户名</code>  —— 以管理员执行其他程序</p>
<p>2）<strong>chmod</strong>（记住：用的多）</p>
<p><code>chmod 权限值 文件</code>         —— 修改指定文件的权限（）</p>
<p><code>chmod    [a,u,g,o][+,-][r,w,x]  文件</code>        - 为指定文件，给所有用户添加相应的权限<br>(a:所有，u:自己，g:同组，o:其他；<br>+：添加， -: 取消；<br>r:读，w:写，x:执行)</p>
<p><code>chmod 用户名  文件</code>    —— 修改文件所有者</p>
<h3 id="5-日志管理"><a href="#5-日志管理" class="headerlink" title="5.日志管理"></a>5.日志管理</h3><p>1）cat指令</p>
<p><strong>cat 文件</strong>   —— 查看文件内容</p>
<p>2）查看部分</p>
<p><code>head -n N</code>   —— 查看前N行的部分</p>
<p><code>tail -n N</code>   —— 查看后N行的部分</p>
<p>3）</p>
<p><code>less 文件</code></p>
<p>​    - 按 j 向下</p>
<p>​    - 按 k 向上</p>
<p>​    - 按 f 向下翻屏</p>
<p>​    - 按    b 向上翻屏</p>
<p>​    - 按 g 到全文开头</p>
<p>​    - 按 G 到全文结尾</p>
<p>​    - 按 Q 退出  </p>
<p><code>more [-N]</code>   —— 和less差不多，这个是尽可能多，less是尽可能少 </p>
<p>4）处理（对通过指令获得的结果进行处理）</p>
<pre><code>sort  —— 排序（例如：cat 文件 |sort）

sort -nk 1  —— 数值大小从小到大排序

sort -nk 2  —— 字符大小从小到大排序

sort -rnk 1  —— 数值大小从大到小排序

sort -rnk 2  —— 字符大小从大到小排序</code></pre><pre><code>uniq  —— 去重（例如：cat 文件|uniq）

uniq -c  ——去重时，统计每个的重复个数</code></pre><p><code>owk &#39;{print $N}&#39;</code>    —— 打印第N列的内容</p>
<p><code>owk &#39;{print $N, $M}&#39;</code>    —— 打印第N,M列的内容</p>
<p>5）重定向——将打印的结果保存到指定文档中</p>
<p><code>执行获取数据的指令 &gt; 文件</code>  (覆盖原文件)</p>
<p><code>执行获取数据的指令 &gt;&gt; 文件</code>(在文件末尾追加写入)</p>
<p>6）统计</p>
<p><code>wc -c(字符)/-w(单词)/-|(行)  文件</code></p>
<p>单词用空格区分；</p>
<p>7）查找</p>
<p><strong>内容查找——</strong></p>
<p><code>grep 查找对象  文件  参数</code>       （在文件中查找）</p>
<p><code>grep -r 查找对象  目录  参数</code>    （在目录中的所有文件查找）</p>
<p>参数：-i   忽略大小写</p>
<p>​        -n   显示行标号</p>
<p>​        -E   通过正则匹配        grep  -E  ‘正则表达式’  文件</p>
<p>​        -v   忽略字段       找到不含有查找对象的所有行</p>
<p>​        -m  递归查找目录，并打印行号</p>
<p>对文件格式进行约束：</p>
<p><code>-include=‘*.文件后缀’</code>   ——在后缀为指定文件后缀的文件内查找</p>
<p><code>-exclude=‘*.文件后缀’</code>   ——不在后缀为指定文件后缀的文件内查找</p>
<p><strong>查找文件——</strong></p>
<p><code>find 目录 -name  ‘*.文件后缀’</code>       —— 在目录中查找是指定文件后缀的文件</p>
<p><code>find 路径 -size +/-文件大小</code>      —— +代表大于，-代表小于</p>
<p>8）查指令</p>
<p><code>which  指令</code>   —— 精确查找当前可执行的指令</p>
<p><code>whereis  指令</code>  —— 查找所有匹配的命令</p>
<p><code>man  指令</code>   —— 使用指令手册</p>
<h3 id="6-网络管理"><a href="#6-网络管理" class="headerlink" title="6.网络管理"></a>6.网络管理</h3><p><code>ifconfig</code>     查看网卡状态</p>
<p><code>netstat   -natp</code>                    - 查看网络连接状态</p>
<p><code>netstat   -natp|grep  端口号</code>            - 查看指定端口的网络连接状态    </p>
<p>*ping  地址 </p>
<p><code>ping  -i   时间    地址</code></p>
<p><code>ping  -c  次数    地址</code></p>
<p><code>telnet  ip地址    端口</code>   - 查看远程主机网络连接状况（需要telnet环境）</p>
<p><code>dig 地址</code>            - 查看DNS   (需要环境支持)</p>
<p>** wget  地址            - 下载  </p>
<h3 id="7-使用包管理工具（掌握）"><a href="#7-使用包管理工具（掌握）" class="headerlink" title="7.使用包管理工具（掌握）"></a>7.使用包管理工具（掌握）</h3><p>包管理工具：yum </p>
<ul>
<li>yum search：搜索软件包，例如yum search nginx。</li>
<li>yum list installed：列出已经安装的软件包，例如yum list installed | grep zlib。</li>
<li>yum install：安装软件包，例如yum install nginx。</li>
<li>yum remove：删除软件包，例如yum remove nginx。</li>
<li>yum update：更新软件包，例如yum update可以更新所有软件包，而yum update tar只会更新tar。</li>
<li>yum check-update：检查有哪些可以更新的软件包。</li>
<li>yum info ：显示软件包的相关信息，例如yum info nginx。</li>
</ul>
<p>源代码构建安装</p>
<ol>
<li>wget  安装包的路径        -下载安装包</li>
<li>gunzip/tar  压缩包         - 解压、解归档</li>
<li>(设置安装路径)</li>
<li>cd 安装包目录 执行: make &amp;&amp; make install       -编译安装包程序</li>
<li>给可执行文件添加软连接到usr/bin目录下            -添加快捷方式</li>
</ol>
<h3 id="8-远程发送文件"><a href="#8-远程发送文件" class="headerlink" title="8.远程发送文件"></a>8.远程发送文件</h3><p><code>scp  文件 root@接收端的IP:服务器上保存发送文件的路径</code></p>
<h2 id="git的使用-版本控制"><a href="#git的使用-版本控制" class="headerlink" title="git的使用-版本控制"></a>git的使用-版本控制</h2><p><img src="E:%5C%E5%8D%83%E5%B3%B0python%E8%B5%84%E6%96%99%5C%E6%AF%8F%E6%97%A5%E8%AF%BE%E7%A8%8B%E7%BB%83%E4%B9%A0%E8%B5%84%E6%96%99%5Chexoblogs%5Csource%5Cimage%5C%E4%BB%93%E5%BA%93.png" srcset="/img/loading.gif" alt="本地仓库和远程仓库的创建、关系、操作"></p>
<h3 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h3><p><code>git init</code> —— 新建git仓库</p>
<p><code>git add 文件/文件夹</code>  —— 将指定文件或文件夹添加的缓存区</p>
<p><code>git add -A</code>   —— 将所有文件添加到缓存区</p>
<p><code>git status</code>  —— 查看git状态</p>
<p><code>git commit -m ‘提交备注信息’</code>    —— 将缓存区的内容全部提交到本地仓库</p>
<p><code>git log</code>   ——查看提交日志</p>
<p><code>git reset  --hard HEAD</code>   —— 让本地仓库和工作目录中的内容保持一致</p>
<p><code>git reset --hard HEAD^</code>   —— 回到上一个版本</p>
<p><code>git reset  --hard 版本号</code>   —— 回到指定的版本</p>
<p><code>git checkout -- 文件名</code>   —— 从缓存区将指定文件回到上次提交时的状态</p>
<h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>1）先创建本地仓库时</p>
<p><code>git remote add origin 地址</code> —— 关联远程仓库</p>
<p><code>git push -u origin master</code>    —— 第一次提交</p>
<p><code>git push</code>  —— 将本地仓库的内容提交到远程仓库</p>
<p><code>git pul</code>l  —— 将远程仓库的内容更新到本地仓库和工作区</p>
<p>2）先创建远程仓库</p>
<p><code>git clone &lt;url&gt;</code>  —— 远程仓库克隆</p>
<p><code>git remote show 远程仓库名</code>    —— <strong>查看远程仓库信息</strong></p>
<h2 id="分之管理"><a href="#分之管理" class="headerlink" title="分之管理"></a><strong>分之管理</strong></h2><p><code>git branch</code>   —— 查看分之</p>
<p><code>git branch 分之名</code>  —— 创建新分之（会拷贝之前的分之内容）</p>
<p><code>git checkout 分之名</code>   ——切换分之</p>
<p><code>git checkout -b 分支名</code>   —— 本地仓库切换并创建新分支</p>
<p><code>git diff  分之1  分之2</code>    —— 查看两个分之间的差异</p>
<p><code>git merge 分之名</code>   —— 让另一个分之与当前分之合并</p>
<p><strong>给远程仓库添加新的分之</strong>：切换到新分支，再利用  <code>git push origin 当前分之名</code>   ，远程仓库便会自动创建当前分之</p>
<p>注意：切换分之、pull、push之前必须保证工作区为clean</p>
]]></content>
      <categories>
        <category>methods</category>
      </categories>
      <tags>
        <tag>vim编辑器的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
 <a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <tags>
        <tag>share something</tag>
      </tags>
  </entry>
</search>
